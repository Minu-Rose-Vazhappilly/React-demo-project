What is CLI?

CLI stands for Command-Line Interface.

It is a way to interact with software using text commands typed into a terminal or command prompt.

Unlike a Graphical User Interface (GUI), there are no buttons or visual menus ‚Äî everything is typed.

Examples:

Terminal on Mac/Linux

Command Prompt or PowerShell on Windows

You type commands like:

cd my-project
ls
mkdir newFolder

üîπ What are CLI Tools?

CLI tools are programs or utilities that you run from the command line to perform tasks.

They help developers do things faster without opening GUIs.

Often used for project setup, build, deployment, testing, and automation.

Examples in React/JS ecosystem:

Node.js CLI ‚Üí node app.js runs JavaScript programs.

npm CLI ‚Üí npm install react installs packages.

Create React App CLI ‚Üí npx create-react-app my-app sets up a new React project.

Git CLI ‚Üí git commit -m "message" manages version control.

Vite CLI ‚Üí npm create vite@latest my-app quickly scaffolds modern React apps.


Commands vs CLI tools
Aspect	                        Command	                                           CLI Tool
Definition	    A single instruction you type in terminal.	         A program/utility that runs in the command line and interprets commands.
Purpose	       Tells the CLI tool what action to perform.	         Executes tasks like scaffolding projects, installing packages, or running scripts.
Example	       npm install react	                                 npm (Node Package Manager)
Behavior	   One action at a time (like installing a package)    	 Can understand many commands and options (like npm install, npm start, npm run build)


Where do we get CLI tools?

CLI tools are programs, so you need to install them on your computer. There are several ways depending on the tool:

1Ô∏è‚É£ Pre-installed with software

Some CLI tools come bundled when you install certain software:

Git CLI ‚Üí comes with Git installation (git-scm.com
)

Node.js CLI (node and npm) ‚Üí comes when you install Node.js (nodejs.org
)

Python CLI (python or pip) ‚Üí comes with Python installation



JSX (JavaScript XML)

Definition:

JSX is a syntax extension for JavaScript that lets you write HTML-like code inside JavaScript.

React uses JSX to define what the UI should look like.

Key points:

Browsers don‚Äôt understand JSX directly ‚Üí it is transformed into JavaScript using Babel.

You can write JavaScript expressions inside curly braces {}.

Example:

const name = "Minu";

function Greeting() {
  return <h1>Hello, {name}!</h1>; // JSX
}


<h1>Hello, {name}!</h1> looks like HTML but is JSX.

{name} ‚Üí JavaScript expression evaluated inside JSX.

Rules:

JSX must have one root element.

Use className instead of class for CSS.

Self-closing tags must end with / (<img />).

2Ô∏è‚É£ Props vs State
Feature	                    Props	                                                        State
Definition	Short for ‚Äúproperties‚Äù, used to pass data from parent to child component	Used to store data that can change inside a component
Mutability	Read-only (cannot change inside child)	                                    Mutable (can be updated with setState in class or useState in functional)
Scope	    Passed from outside	                                                        Local to the component
Example	<Child name="Minu" /> ‚Üí child reads props	                                    const [count, setCount] = useState(0)

Example in React (Functional):

function Child({ name }) {
  return <h2>Hello, {name}</h2>; // using prop
}

function Parent() {
  const [count, setCount] = React.useState(0); // state
  return (
    <>
      <Child name="Minu" />
      <button onClick={() => setCount(count + 1)}>Count: {count}</button>
    </>
  );
}


Prop example: Passing "Minu" to child.

State example: Counter inside parent changes on button click.

3Ô∏è‚É£ Conditional Rendering

Definition:

Render different UI elements based on conditions (like if-else).

Ways to do it:

Using if-else inside component:

function Greeting({ isLoggedIn }) {
  if (isLoggedIn) {
    return <h1>Welcome back!</h1>;
  } else {
    return <h1>Please login</h1>;
  }
}


Using ternary operator inside JSX:

<h1>{isLoggedIn ? "Welcome back!" : "Please login"}</h1>


Using logical AND (&&) operator:

{isLoggedIn && <button>Logout</button>}


Key point:

Conditional rendering lets React dynamically change UI without reloading the page.

4Ô∏è‚É£ Component Composition

Definition:

Composing components means combining smaller components into larger ones.

Helps reuse code and organize UI.

Example:

function Header() {
  return <h1>My App</h1>;
}

function Footer() {
  return <footer>¬© 2025</footer>;
}

function App() {
  return (
    <div>
      <Header />
      <p>Welcome to the app!</p>
      <Footer />
    </div>
  );
}


App component composes Header, Footer, and a paragraph.

This is cleaner and reusable.

Key point:

Composition is like LEGO blocks ‚Üí small components can be combined to build complex UI.


2) Lists & Keys
What it is

Rendering lists means mapping an array to JSX elements. Keys are special ids React uses to identify which items changed, were added, or removed ‚Äî enabling efficient updates.

Why keys matter

React uses the key to match elements between renders. A stable, unique key helps React preserve component state and apply minimal DOM changes.

Imagine a list:
Index:   0      1      2
Data:   [10,   20,    30]
Key:    0      1      2   (using index as key ‚ùå)


Now React associates each index with the UI element.

0 ‚Üí 10

1 ‚Üí 20

2 ‚Üí 30

üîπ Now insert a new number at the start:
Data:   [99,   10,   20,   30]
Index:   0     1     2     3
Key:     0     1     2     3   (indexes shift ‚ùå)


Look what happens:

The old ‚Äú10‚Äù was at index 0, but now ‚Äú99‚Äù is at index 0.

React sees the same key = 0 and thinks: ‚ÄúOh, same element, I‚Äôll just update its value.‚Äù

So the UI confuses 99 with 10, reuses DOM nodes wrongly.





